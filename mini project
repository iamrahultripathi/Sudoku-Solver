N = 9 #N is size of the matrix

#A function to print solved board
def display(arr):
	for i in range(N):
		for j in range(N):
			print(arr[i][j], end = " ")
		print()

#A function to Check 
def isSafe(board, row, col, num):
#Check the same num in same row
	for x in range(9):
		if board[row][x] == num:
			return False
#Check the same num in same column
	for x in range(9):
		if board[x][col] == num:
			return False
#Check same num in same sub matrix
	startRow = (row//3) * 3
	startCol = (col//3) * 3
	for i in range(3):
		for j in range(3):
			if board[i + startRow][j + startCol] == num:
				return False
	return True

def solveSudoku(board, row, col):
	if (row == N-1 and col == N):
		return True
    #Change row
	if col == N:
		row += 1
		col = 0
    #Check Empty 
	if board[row][col] != 0:
		return solveSudoku(board, row, col + 1)
	for num in range(1, N + 1, 1):
		if isSafe(board, row, col, num):
            #Assigning the num
			board[row][col] = num

			#Recursion for checking for next possibility
			if solveSudoku(board, row, col + 1):
				return True
		board[row][col] = 0 #backtracking
	return False

# 0 means empty cells
board = [[3, 0, 6, 5, 0, 8, 4, 0, 0],
		[5, 2, 0, 0, 0, 0, 0, 0, 0],
		[0, 8, 7, 0, 0, 0, 0, 3, 1],
		[0, 0, 3, 0, 1, 0, 0, 8, 0],
		[9, 0, 0, 8, 6, 3, 0, 0, 5],
		[0, 5, 0, 0, 9, 0, 6, 0, 0],
		[1, 3, 0, 0, 0, 0, 2, 5, 0],
		[0, 0, 0, 0, 0, 0, 0, 7, 4],
		[0, 0, 5, 2, 0, 6, 3, 0, 0]]

if (solveSudoku(board, 0, 0)):
	display(board)
else:
	print("SORRY!! Your Sudoku is wrong.")
